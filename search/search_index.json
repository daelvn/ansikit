{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ansikit - ANSI code toolkit for Lua \u00b6 A library for usual ANSI codes, with some extended capabilities like a color palette library or styling functions. It is written in MoonScript but plays nice with Lua. Installation \u00b6 You can install the library with LuaRocks . $ luarocks install ansikit This will make all modules available to you. LuaRocks should automatically install dependencies for the module, but otherwise, feel free to manually download typical and guardia . $ luarocks install typical $ luarocks install guardia License \u00b6 I'm throwing this, as always, to the public domain, do what you want with it. Maintainer \u00b6 Dael daelvn@gmail.com Goodbye? \u00b6 goodbye.","title":"Home"},{"location":"#ansikit-ansi-code-toolkit-for-lua","text":"A library for usual ANSI codes, with some extended capabilities like a color palette library or styling functions. It is written in MoonScript but plays nice with Lua.","title":"ansikit - ANSI code toolkit for Lua"},{"location":"#installation","text":"You can install the library with LuaRocks . $ luarocks install ansikit This will make all modules available to you. LuaRocks should automatically install dependencies for the module, but otherwise, feel free to manually download typical and guardia . $ luarocks install typical $ luarocks install guardia","title":"Installation"},{"location":"#license","text":"I'm throwing this, as always, to the public domain, do what you want with it.","title":"License"},{"location":"#maintainer","text":"Dael daelvn@gmail.com","title":"Maintainer"},{"location":"#goodbye","text":"goodbye.","title":"Goodbye?"},{"location":"changelog/","text":"Changelog \u00b6 v1.0 \u00b6 Initial commit.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v10","text":"Initial commit.","title":"v1.0"},{"location":"manual/basics/","text":"Basics in ansikit \u00b6 This tutorial covers the basics of ansikit. Just enough to get you started with the library. Installation \u00b6 You can install the library with LuaRocks . $ luarocks install ansikit This will make all modules available to you. LuaRocks should automatically install dependencies for the module, but otherwise, feel free to manually download typical and guardia . $ luarocks install typical $ luarocks install guardia Usage \u00b6 ansikit is split in several modules that provide grouped functionality, letting you import only what you need. All modules return a table with the named exported values, as is conventional. Lua text = require \"ansikit.text\" print text . bold .. \"hello\" .. text . reset MoonScript import bold , reset from require \" ansikit.text \" print \" #{bold}hello#{reset} \" Basic sequences \u00b6 You can form basic escape sequences using the Sequence function in ansikit.sequence . It takes a start character sb and a trailing character tb that defaults to an empty string. Passing those will produce a function that takes arguments and returns an escape sequence. Example \u00b6 Lua SGR = Sequence ( 27 , \"m\" ) reset = SGR ( 0 , 1 ) -- string.char(27) .. \"[0;1\" .. \"m\" MoonScript SGR = Sequence 27 , \" m \" reset = SGR 0 , 1 -- (string.char 27) .. \"[0;1\" .. \"m\" The SGR function is already provided as a part of ansikit.sequence . Cursor and page manipulation \u00b6 You can use predefined ANSI escape sequences that will let you clear your screen, scroll up/down, change cursor position, etc. All the functions are documented in the ansikit.page module page , and here we will only cover what you might use the most. To clear a part of the screen, or the whole thing, you might want to use the clear function. It takes a direction between screen (all that is displayed), all (includes buffer), fromcursor (all from cursor), and tocursor (all until cursor). To scroll, you can use the scroll function, which takes a direction from up and down and a number of lines to scroll, which defaults to 1. To move the cursor, you would use two methods, cursorMove to move relatively and cursorSetPosition to move absolutely. Lua cursorMove ( \"down\" , 5 ) cursorSetPosition ( 0 , 0 ) MoonScript cursorMove \" down \" , 5 cursorSetPosition 0 , 0 You can also save and restore a cursor position with cursorSave and cursorRestore . Text styles \u00b6 You can use text styles directly from ansikit.text , and you can find the full list of styles in there. To use them, you just concatenate them to your string. Remember to use text.reset at the end so it doesn't overflow into other text! Lua text = require \"ansikit.text\" print text . bold .. \"hello\" .. text . reset MoonScript import bold , reset from require \" ansikit.text \" print \" #{bold}hello#{reset} \" Color basics \u00b6 To use traditional ANSI escape codes, instead of boilerplate added by ansikit for color management, you can use the functions Bit4 for traditional ANSI escape sequences, Bit8 for 255-indexed and Bit24 for true color. These will generate strings you can concatenate to your strings to color them. Lua print Bit4 ( 91 , 46 ) .. \"bright red text and cyan bg\" .. reset print Bit8 ( 226 , true ) .. \"yellow background\" .. reset print Bit24 ( 255 , 255 , 255 , true ) .. \"rgb white background\" .. reset MoonScript print \" #{Bit4 91, 46}bright red text and cyan bg#{reset} \" print \" #{Bit8 226, true}yellow background#{reset} \" print \" #{Bit24 255,255,255, true}rgb white background#{reset} \" But often, you will want to use something simpler, in which case, ansikit.style implements ansicolors.lua and Chalk clones. You can read more about them in the link to ansikit.style . Conclusion \u00b6 All of this pretty much covers the basics of ansikit, and the next tutorial covers more on managing colors.","title":"Basics"},{"location":"manual/basics/#basics-in-ansikit","text":"This tutorial covers the basics of ansikit. Just enough to get you started with the library.","title":"Basics in ansikit"},{"location":"manual/basics/#installation","text":"You can install the library with LuaRocks . $ luarocks install ansikit This will make all modules available to you. LuaRocks should automatically install dependencies for the module, but otherwise, feel free to manually download typical and guardia . $ luarocks install typical $ luarocks install guardia","title":"Installation"},{"location":"manual/basics/#usage","text":"ansikit is split in several modules that provide grouped functionality, letting you import only what you need. All modules return a table with the named exported values, as is conventional. Lua text = require \"ansikit.text\" print text . bold .. \"hello\" .. text . reset MoonScript import bold , reset from require \" ansikit.text \" print \" #{bold}hello#{reset} \"","title":"Usage"},{"location":"manual/basics/#basic-sequences","text":"You can form basic escape sequences using the Sequence function in ansikit.sequence . It takes a start character sb and a trailing character tb that defaults to an empty string. Passing those will produce a function that takes arguments and returns an escape sequence.","title":"Basic sequences"},{"location":"manual/basics/#example","text":"Lua SGR = Sequence ( 27 , \"m\" ) reset = SGR ( 0 , 1 ) -- string.char(27) .. \"[0;1\" .. \"m\" MoonScript SGR = Sequence 27 , \" m \" reset = SGR 0 , 1 -- (string.char 27) .. \"[0;1\" .. \"m\" The SGR function is already provided as a part of ansikit.sequence .","title":"Example"},{"location":"manual/basics/#cursor-and-page-manipulation","text":"You can use predefined ANSI escape sequences that will let you clear your screen, scroll up/down, change cursor position, etc. All the functions are documented in the ansikit.page module page , and here we will only cover what you might use the most. To clear a part of the screen, or the whole thing, you might want to use the clear function. It takes a direction between screen (all that is displayed), all (includes buffer), fromcursor (all from cursor), and tocursor (all until cursor). To scroll, you can use the scroll function, which takes a direction from up and down and a number of lines to scroll, which defaults to 1. To move the cursor, you would use two methods, cursorMove to move relatively and cursorSetPosition to move absolutely. Lua cursorMove ( \"down\" , 5 ) cursorSetPosition ( 0 , 0 ) MoonScript cursorMove \" down \" , 5 cursorSetPosition 0 , 0 You can also save and restore a cursor position with cursorSave and cursorRestore .","title":"Cursor and page manipulation"},{"location":"manual/basics/#text-styles","text":"You can use text styles directly from ansikit.text , and you can find the full list of styles in there. To use them, you just concatenate them to your string. Remember to use text.reset at the end so it doesn't overflow into other text! Lua text = require \"ansikit.text\" print text . bold .. \"hello\" .. text . reset MoonScript import bold , reset from require \" ansikit.text \" print \" #{bold}hello#{reset} \"","title":"Text styles"},{"location":"manual/basics/#color-basics","text":"To use traditional ANSI escape codes, instead of boilerplate added by ansikit for color management, you can use the functions Bit4 for traditional ANSI escape sequences, Bit8 for 255-indexed and Bit24 for true color. These will generate strings you can concatenate to your strings to color them. Lua print Bit4 ( 91 , 46 ) .. \"bright red text and cyan bg\" .. reset print Bit8 ( 226 , true ) .. \"yellow background\" .. reset print Bit24 ( 255 , 255 , 255 , true ) .. \"rgb white background\" .. reset MoonScript print \" #{Bit4 91, 46}bright red text and cyan bg#{reset} \" print \" #{Bit8 226, true}yellow background#{reset} \" print \" #{Bit24 255,255,255, true}rgb white background#{reset} \" But often, you will want to use something simpler, in which case, ansikit.style implements ansicolors.lua and Chalk clones. You can read more about them in the link to ansikit.style .","title":"Color basics"},{"location":"manual/basics/#conclusion","text":"All of this pretty much covers the basics of ansikit, and the next tutorial covers more on managing colors.","title":"Conclusion"},{"location":"manual/colors/","text":"Colors in ansikit \u00b6 This is a very basic tutorial for color management using ansikit . It doesn't cover what is already covered in the Basics tutorial . Color objects \u00b6 You can create tables of type Color (using typical /typekit) that can be transformed and concatenated. Properties \u00b6 You can index r , g and b values in the table (0-255), as well as a bg boolean value, which is true if the color is a background color. Metamethofs \u00b6 __type \u00b6 It has a __type metamethod, set to Color . __tostring \u00b6 If __tostring is used, it is converted into a true color escape sequence (using Bit24 ). __concat \u00b6 It allows the color to be concatenated to strings or to other Colors. Functions \u00b6 You can switch the bg flag in the table by using the functions background and foreground , which do exactly what you think. They return the object as well. ## Palettes ansikit includes Palettes both as color collections and as a type that you can create. color4 \u00b6 This is a named collection of all Bit4 colors. See the documentation for reference on how to access it. color8 \u00b6 This is a named collection of all Bit8 colors. See the documentation for reference on how to access it. Palette \u00b6 This lets you create your own palette with a name, and optionally a list of Color s. Managing the palette \u00b6 You can add colors to it with the function addColor or remove from it with removeColor . You can also get its name with the function nameFor . Metamethods \u00b6 __type \u00b6 __type is set to Palette . __index \u00b6 Allows for custom indexing. Will generally allow you to get a color by its name, but you can also index __name to get the name of the palette or __colors to get the internal list of colorss for the palette. Example \u00b6 Lua mypal = Palette \"mypal\" addColor ( mypal ) ( \"white\" , Color ( 255 , 255 , 255 )) mypal . white -- Color(255, 255, 255) MoonScript mypal = Palette \" mypal \" ( addColor mypal ) \" white \" , Color 255 , 255 , 255 mypal . white -- Color 255, 255, 255 Paint \u00b6 Purely for compatibility with CraftOS, ansikit.paint will let you load and draw NFP formatted images. NFP format \u00b6 The NFP formats simply consists of text where a whitespace means \"empty\", a newline means \"next row\", and a hex character is a color. In this library, when an image is loaded, each item in a row is a background Color object, which, at drawing time, is prepended to a single space ( ). colors \u00b6 colors is a Palette named CraftOS with the default CraftOS colors. Color Paint Display colors.white 0 #F0F0F0 colors.orange 1 #F2B233 colors.magenta 2 #E57FD8 colors.lightBlue 3 #99B2F2 colors.yellow 4 #DEDE6C colors.lime 5 #7FCC19 colors.pink 6 #F2B2CC colors.gray 7 #4C4C4C colors.lightGray 8 #999999 colors.cyan 9 #4C99B2 colors.purple a #B266E5 colors.blue b #3366CC colors.brown c #7F664C colors.green d #57A64E colors.red e #CC4C4C colors.black f #191919 Loading and drawing \u00b6 You can load an image from a text file using loadImage or from a Lua string using loadNFP . loadImage uses loadNFP underneath. After you have your table, you can blit it into the terminal using the function drawImage .","title":"Colors"},{"location":"manual/colors/#colors-in-ansikit","text":"This is a very basic tutorial for color management using ansikit . It doesn't cover what is already covered in the Basics tutorial .","title":"Colors in ansikit"},{"location":"manual/colors/#color-objects","text":"You can create tables of type Color (using typical /typekit) that can be transformed and concatenated.","title":"Color objects"},{"location":"manual/colors/#properties","text":"You can index r , g and b values in the table (0-255), as well as a bg boolean value, which is true if the color is a background color.","title":"Properties"},{"location":"manual/colors/#metamethofs","text":"","title":"Metamethofs"},{"location":"manual/colors/#__type","text":"It has a __type metamethod, set to Color .","title":"__type"},{"location":"manual/colors/#__tostring","text":"If __tostring is used, it is converted into a true color escape sequence (using Bit24 ).","title":"__tostring"},{"location":"manual/colors/#__concat","text":"It allows the color to be concatenated to strings or to other Colors.","title":"__concat"},{"location":"manual/colors/#functions","text":"You can switch the bg flag in the table by using the functions background and foreground , which do exactly what you think. They return the object as well. ## Palettes ansikit includes Palettes both as color collections and as a type that you can create.","title":"Functions"},{"location":"manual/colors/#color4","text":"This is a named collection of all Bit4 colors. See the documentation for reference on how to access it.","title":"color4"},{"location":"manual/colors/#color8","text":"This is a named collection of all Bit8 colors. See the documentation for reference on how to access it.","title":"color8"},{"location":"manual/colors/#palette","text":"This lets you create your own palette with a name, and optionally a list of Color s.","title":"Palette"},{"location":"manual/colors/#managing-the-palette","text":"You can add colors to it with the function addColor or remove from it with removeColor . You can also get its name with the function nameFor .","title":"Managing the palette"},{"location":"manual/colors/#metamethods","text":"","title":"Metamethods"},{"location":"manual/colors/#__type_1","text":"__type is set to Palette .","title":"__type"},{"location":"manual/colors/#__index","text":"Allows for custom indexing. Will generally allow you to get a color by its name, but you can also index __name to get the name of the palette or __colors to get the internal list of colorss for the palette.","title":"__index"},{"location":"manual/colors/#example","text":"Lua mypal = Palette \"mypal\" addColor ( mypal ) ( \"white\" , Color ( 255 , 255 , 255 )) mypal . white -- Color(255, 255, 255) MoonScript mypal = Palette \" mypal \" ( addColor mypal ) \" white \" , Color 255 , 255 , 255 mypal . white -- Color 255, 255, 255","title":"Example"},{"location":"manual/colors/#paint","text":"Purely for compatibility with CraftOS, ansikit.paint will let you load and draw NFP formatted images.","title":"Paint"},{"location":"manual/colors/#nfp-format","text":"The NFP formats simply consists of text where a whitespace means \"empty\", a newline means \"next row\", and a hex character is a color. In this library, when an image is loaded, each item in a row is a background Color object, which, at drawing time, is prepended to a single space ( ).","title":"NFP format"},{"location":"manual/colors/#colors","text":"colors is a Palette named CraftOS with the default CraftOS colors. Color Paint Display colors.white 0 #F0F0F0 colors.orange 1 #F2B233 colors.magenta 2 #E57FD8 colors.lightBlue 3 #99B2F2 colors.yellow 4 #DEDE6C colors.lime 5 #7FCC19 colors.pink 6 #F2B2CC colors.gray 7 #4C4C4C colors.lightGray 8 #999999 colors.cyan 9 #4C99B2 colors.purple a #B266E5 colors.blue b #3366CC colors.brown c #7F664C colors.green d #57A64E colors.red e #CC4C4C colors.black f #191919","title":"colors"},{"location":"manual/colors/#loading-and-drawing","text":"You can load an image from a text file using loadImage or from a Lua string using loadNFP . loadImage uses loadNFP underneath. After you have your table, you can blit it into the terminal using the function drawImage .","title":"Loading and drawing"},{"location":"module/color/","text":"ansikit.color \u00b6 Use colors with ANSI sequences. Refer to this Wikipedia page for a list of colors or how to use ANSI sequences in general. Bit4 \u00b6 Signature \u2192 (number) -> string Generates a single-number color escape sequence. Equivalent to using (Sequence 27, \"m\") n . Bit8 \u00b6 Signature \u2192 (number, boolean) -> string Chooses a color 0-255 from a predefined palette. The boolean determines whether it is a foreground or background color ( false for foreground, true for background, defaults to false ). Bit24 \u00b6 Signature \u2192 (number, number, number, boolean) -> string Takes r , g and b parameters and a boolean that determines whether it is a foreground or background color (works as in Bit8 ). Color \u00b6 Signature \u2192 ( number , number , number , [ boolean ] ) -> Color A function that creates a representation of an RGB color, with an optional background flag (if set to false, will be used as foreground, and otherwise as background. Defaults to false). The colors are passed in order r , g , b . Lua white = Color ( 255 , 255 , 255 ) MoonScript white = Color 255 , 255 , 255 background \u00b6 Takes a Color and sets it to a background color. foreground \u00b6 Takes a Color and sets it to a foreground color. hexToRGB \u00b6 Signature \u2192 (number|string) -> number, number, number Taxes a hex number or 6-digit long hex string and turns it into three RGB components.","title":"ansikit.color"},{"location":"module/color/#ansikitcolor","text":"Use colors with ANSI sequences. Refer to this Wikipedia page for a list of colors or how to use ANSI sequences in general.","title":"ansikit.color"},{"location":"module/color/#bit4","text":"Signature \u2192 (number) -> string Generates a single-number color escape sequence. Equivalent to using (Sequence 27, \"m\") n .","title":"Bit4"},{"location":"module/color/#bit8","text":"Signature \u2192 (number, boolean) -> string Chooses a color 0-255 from a predefined palette. The boolean determines whether it is a foreground or background color ( false for foreground, true for background, defaults to false ).","title":"Bit8"},{"location":"module/color/#bit24","text":"Signature \u2192 (number, number, number, boolean) -> string Takes r , g and b parameters and a boolean that determines whether it is a foreground or background color (works as in Bit8 ).","title":"Bit24"},{"location":"module/color/#color","text":"Signature \u2192 ( number , number , number , [ boolean ] ) -> Color A function that creates a representation of an RGB color, with an optional background flag (if set to false, will be used as foreground, and otherwise as background. Defaults to false). The colors are passed in order r , g , b . Lua white = Color ( 255 , 255 , 255 ) MoonScript white = Color 255 , 255 , 255","title":"Color"},{"location":"module/color/#background","text":"Takes a Color and sets it to a background color.","title":"background"},{"location":"module/color/#foreground","text":"Takes a Color and sets it to a foreground color.","title":"foreground"},{"location":"module/color/#hextorgb","text":"Signature \u2192 (number|string) -> number, number, number Taxes a hex number or 6-digit long hex string and turns it into three RGB components.","title":"hexToRGB"},{"location":"module/cursor/","text":"ansikit.cursor \u00b6 Cursor-manipulating functions and escape sequences. cursorUp \u00b6 Signature \u2192 ( [ number ] ) -> nil Moves the cursor up n characters. n defaults to 1. cursorDown \u00b6 Signature \u2192 ( [ number ] ) -> nil Moves the cursor down n characters. n defaults to 1. cursorForward \u00b6 Signature \u2192 ( [ number ] ) -> nil Moves the cursor forward n characters. n defaults to 1. cursorBack \u00b6 Signature \u2192 ( [ number ] ) -> nil Moves the cursor back n characters. n defaults to 1. cursorNextLn \u00b6 Signature \u2192 ( [ number ] ) -> nil Moves the cursor to the next n lines. n defaults to 1. cursorPreviousLn \u00b6 Signature \u2192 ( [ number ] ) -> nil Moves the cursor to the previous n lines. n defaults to 1. cursorSetColumn \u00b6 Signature \u2192 ( [ number ] ) -> nil Moves the cursor to column n . n defaults to 1. cursorMove \u00b6 Signature \u2192 ( string , [ number ] ) -> nil Takes a direction from up , down , forward , back , nextline , previousline , column and moves n in that direction. n defaults to 1. cursorSetPosition \u00b6 Signature \u2192 (number, number) -> nil Sets the cursor position to x and y . cursorSetPosition1 \u00b6 Signature \u2192 (number) -> (number) -> nil Curried version of cursorPosition . cursorSave \u00b6 Signature \u2192 nil Saves the current cursor position. cursorRestore \u00b6 Signature \u2192 nil Restores the previously saved cursor position.","title":"ansikit.cursor"},{"location":"module/cursor/#ansikitcursor","text":"Cursor-manipulating functions and escape sequences.","title":"ansikit.cursor"},{"location":"module/cursor/#cursorup","text":"Signature \u2192 ( [ number ] ) -> nil Moves the cursor up n characters. n defaults to 1.","title":"cursorUp"},{"location":"module/cursor/#cursordown","text":"Signature \u2192 ( [ number ] ) -> nil Moves the cursor down n characters. n defaults to 1.","title":"cursorDown"},{"location":"module/cursor/#cursorforward","text":"Signature \u2192 ( [ number ] ) -> nil Moves the cursor forward n characters. n defaults to 1.","title":"cursorForward"},{"location":"module/cursor/#cursorback","text":"Signature \u2192 ( [ number ] ) -> nil Moves the cursor back n characters. n defaults to 1.","title":"cursorBack"},{"location":"module/cursor/#cursornextln","text":"Signature \u2192 ( [ number ] ) -> nil Moves the cursor to the next n lines. n defaults to 1.","title":"cursorNextLn"},{"location":"module/cursor/#cursorpreviousln","text":"Signature \u2192 ( [ number ] ) -> nil Moves the cursor to the previous n lines. n defaults to 1.","title":"cursorPreviousLn"},{"location":"module/cursor/#cursorsetcolumn","text":"Signature \u2192 ( [ number ] ) -> nil Moves the cursor to column n . n defaults to 1.","title":"cursorSetColumn"},{"location":"module/cursor/#cursormove","text":"Signature \u2192 ( string , [ number ] ) -> nil Takes a direction from up , down , forward , back , nextline , previousline , column and moves n in that direction. n defaults to 1.","title":"cursorMove"},{"location":"module/cursor/#cursorsetposition","text":"Signature \u2192 (number, number) -> nil Sets the cursor position to x and y .","title":"cursorSetPosition"},{"location":"module/cursor/#cursorsetposition1","text":"Signature \u2192 (number) -> (number) -> nil Curried version of cursorPosition .","title":"cursorSetPosition1"},{"location":"module/cursor/#cursorsave","text":"Signature \u2192 nil Saves the current cursor position.","title":"cursorSave"},{"location":"module/cursor/#cursorrestore","text":"Signature \u2192 nil Restores the previously saved cursor position.","title":"cursorRestore"},{"location":"module/page/","text":"ansikit.page \u00b6 Page-manipulating functions and escape sequences. eraseFromCursor \u00b6 Signature \u2192 nil Alias \u2192 clearFromCursor Clears everything from the cursor position. eraseToCursor \u00b6 Signature \u2192 nil Alias \u2192 clearToCursor Clears everything until the cursor position. eraseScreen \u00b6 Signature \u2192 nil Alias \u2192 clearScreen Clears everything currently displayed. eraseFullScreen \u00b6 Signature \u2192 nil Alias \u2192 clearFullScreen , eraseAll , clearAll Clears everything currently displayed and in the scrollback buffer. erase \u00b6 Signature \u2192 (string) -> nil Alias \u2192 clear Takes a direction between screen , all , fromcursor and tocursor and erases it. scrollUp \u00b6 Signature \u2192 ( [ number ] ) -> nil Scrolls up page by n lines. n defaults to 1. scrollDown \u00b6 Signature \u2192 ( [ number ] ) -> nil Scrolls down page by n lines. n defaults to 1. scroll \u00b6 Signature \u2192 ( string , [ number ] ) -> nil Scrolls page in direction up or down by n lines. n defaults to 1.","title":"ansikit.page"},{"location":"module/page/#ansikitpage","text":"Page-manipulating functions and escape sequences.","title":"ansikit.page"},{"location":"module/page/#erasefromcursor","text":"Signature \u2192 nil Alias \u2192 clearFromCursor Clears everything from the cursor position.","title":"eraseFromCursor"},{"location":"module/page/#erasetocursor","text":"Signature \u2192 nil Alias \u2192 clearToCursor Clears everything until the cursor position.","title":"eraseToCursor"},{"location":"module/page/#erasescreen","text":"Signature \u2192 nil Alias \u2192 clearScreen Clears everything currently displayed.","title":"eraseScreen"},{"location":"module/page/#erasefullscreen","text":"Signature \u2192 nil Alias \u2192 clearFullScreen , eraseAll , clearAll Clears everything currently displayed and in the scrollback buffer.","title":"eraseFullScreen"},{"location":"module/page/#erase","text":"Signature \u2192 (string) -> nil Alias \u2192 clear Takes a direction between screen , all , fromcursor and tocursor and erases it.","title":"erase"},{"location":"module/page/#scrollup","text":"Signature \u2192 ( [ number ] ) -> nil Scrolls up page by n lines. n defaults to 1.","title":"scrollUp"},{"location":"module/page/#scrolldown","text":"Signature \u2192 ( [ number ] ) -> nil Scrolls down page by n lines. n defaults to 1.","title":"scrollDown"},{"location":"module/page/#scroll","text":"Signature \u2192 ( string , [ number ] ) -> nil Scrolls page in direction up or down by n lines. n defaults to 1.","title":"scroll"},{"location":"module/paint/","text":"ansikit.paint \u00b6 NFP Paint format support from CraftOS. colors \u00b6 A Palette that mimics the CraftOS colors API . loadNFP \u00b6 Signature \u2192 (string) -> table Gets an NFP-formatted string and creates a table out of the representation. The table contains rows, and each row contains a color per column. No characters are involved. loadImage \u00b6 Equivalent to loadNFP , but it takes a filename and loads the image from a file. drawImage \u00b6 Signature \u2192 (table) -> nil Prints an image that was loaded with loadImage or loadNFP .","title":"ansikit.paint"},{"location":"module/paint/#ansikitpaint","text":"NFP Paint format support from CraftOS.","title":"ansikit.paint"},{"location":"module/paint/#colors","text":"A Palette that mimics the CraftOS colors API .","title":"colors"},{"location":"module/paint/#loadnfp","text":"Signature \u2192 (string) -> table Gets an NFP-formatted string and creates a table out of the representation. The table contains rows, and each row contains a color per column. No characters are involved.","title":"loadNFP"},{"location":"module/paint/#loadimage","text":"Equivalent to loadNFP , but it takes a filename and loads the image from a file.","title":"loadImage"},{"location":"module/paint/#drawimage","text":"Signature \u2192 (table) -> nil Prints an image that was loaded with loadImage or loadNFP .","title":"drawImage"},{"location":"module/palette/","text":"ansikit.palettte \u00b6 Palettes and color representations for ansikit. color4 \u00b6 A table that contains a collection of Bit4 colors. - black - red - green - yellow - blue - magenta - cyan - white It can be prefixed with modifiers such as bg or bright , so you can address color4.white , color4.bg.white , color4.bright.white and color4.bright.bg.white . color8 \u00b6 Table that generates Bit8 colors based on an index. Accepts a single bg modifier. They are accessed with an underscore on front, such as color8._255 or color8.bg._48 . Palette \u00b6 Signature \u2192 ( string , [ table ] ) -> Palette Creates a named palette that can contain colors. It takes an optional table that contains a list of Color s. You can access its name indexing __name and the color list using __colors , but you should use the functions for that. You can index colors already added by using a normal index, such as pal.white . nameFor \u00b6 Signature \u2192 (Palette) -> string|nil Returns the name for a Palette . addColor \u00b6 Signature \u2192 (Palette) -> (string, Color) -> nil Takes a Palette , then a name and a Color and adds it to the palette. removeColor \u00b6 Signature \u2192 (Palette) -> (string) -> nil Removes a color from a Palette by name.","title":"ansikit.palette"},{"location":"module/palette/#ansikitpalettte","text":"Palettes and color representations for ansikit.","title":"ansikit.palettte"},{"location":"module/palette/#color4","text":"A table that contains a collection of Bit4 colors. - black - red - green - yellow - blue - magenta - cyan - white It can be prefixed with modifiers such as bg or bright , so you can address color4.white , color4.bg.white , color4.bright.white and color4.bright.bg.white .","title":"color4"},{"location":"module/palette/#color8","text":"Table that generates Bit8 colors based on an index. Accepts a single bg modifier. They are accessed with an underscore on front, such as color8._255 or color8.bg._48 .","title":"color8"},{"location":"module/palette/#palette","text":"Signature \u2192 ( string , [ table ] ) -> Palette Creates a named palette that can contain colors. It takes an optional table that contains a list of Color s. You can access its name indexing __name and the color list using __colors , but you should use the functions for that. You can index colors already added by using a normal index, such as pal.white .","title":"Palette"},{"location":"module/palette/#namefor","text":"Signature \u2192 (Palette) -> string|nil Returns the name for a Palette .","title":"nameFor"},{"location":"module/palette/#addcolor","text":"Signature \u2192 (Palette) -> (string, Color) -> nil Takes a Palette , then a name and a Color and adds it to the palette.","title":"addColor"},{"location":"module/palette/#removecolor","text":"Signature \u2192 (Palette) -> (string) -> nil Removes a color from a Palette by name.","title":"removeColor"},{"location":"module/sequence/","text":"ansikit.sequence \u00b6 Form ANSI sequences easily. Sequence \u00b6 Signature \u2192 (string|number) -> ([string|number]) -> (...) -> string Creates and ANSI sequence with start character sb and final character tb . tb is usually ST, but is not always needed. MoonScript color = ( Sequence 27 ) \" m \" color 38 , 2 , 255 , 255 , 255 -- ^[38;2;255;255;255m Lua color = Sequence ( 27 )( \"m\" ) color ( 38 , 2 , 255 , 255 , 255 ) -- ^[38;2;255;255;255m SGR \u00b6 Sequence with the arguments 27 and \"m\" passed in. reSGR \u00b6 Pattern \u2192 string.char(27)..\"%[(%d+)<<m A string that holds a pattern to match a SGR sequence of up to 3 parameters. unparseSGR \u00b6 Signature \u2192 (string) -> ... Takes an ANSI sequence and uses reSGR to return up to 3 digit matches in the sequence.","title":"ansikit.sequence"},{"location":"module/sequence/#ansikitsequence","text":"Form ANSI sequences easily.","title":"ansikit.sequence"},{"location":"module/sequence/#sequence","text":"Signature \u2192 (string|number) -> ([string|number]) -> (...) -> string Creates and ANSI sequence with start character sb and final character tb . tb is usually ST, but is not always needed. MoonScript color = ( Sequence 27 ) \" m \" color 38 , 2 , 255 , 255 , 255 -- ^[38;2;255;255;255m Lua color = Sequence ( 27 )( \"m\" ) color ( 38 , 2 , 255 , 255 , 255 ) -- ^[38;2;255;255;255m","title":"Sequence"},{"location":"module/sequence/#sgr","text":"Sequence with the arguments 27 and \"m\" passed in.","title":"SGR"},{"location":"module/sequence/#resgr","text":"Pattern \u2192 string.char(27)..\"%[(%d+)<<m A string that holds a pattern to match a SGR sequence of up to 3 parameters.","title":"reSGR"},{"location":"module/sequence/#unparsesgr","text":"Signature \u2192 (string) -> ... Takes an ANSI sequence and uses reSGR to return up to 3 digit matches in the sequence.","title":"unparseSGR"},{"location":"module/style/","text":"ansikit.style \u00b6 ansicolors.lua and chalk drop-in replacement that uses ansikit as a backend. It is worth noting that it also supports all extra ansikit styles and modifiers, such as fraktur . colorize \u00b6 ansicolors.lua clone, works roughly the same way. Taken from the ansicolors documentation, and adapted for ansikit: Lua print ( colorize ( '%{red}hello' )) print ( colorize ( '%{redbg}hello%{reset}' )) print ( colorize ( '%{bold red underline}hello' )) MoonScript print colorize \" %{red}hello \" print colorize \" %{redbg}hello%{reset} \" print colorize \" %{bold red underline}hello \" The colorize function makes sure that color attributes are reset at each end of the generated string. If you want to generate complex strings piece-by-piece, use colorize.noReset , which works exactly the same, but without adding the reset codes at each end of the string. Differences \u00b6 ansicolors names the code for bold \"bright\". ansikit differences between bold and bright colors, so to use the bright version of a color you should use bright<color> , and to use bold, simply use the bold attribute. Some attributes are different between ansicolors and ansikit. ansicolor uses \"hidden\" whereas ansikit uses \"conceal\". ansicolor uses \"dim\" whereas ansikit uses \"faint\". Refer to the ansikit.text documentation to see valid attributes. ansicolors detects if it's running on Windows, and if it is, then does not print ANSI codes. This library was half-developed on Windows (eugh, I know), and it Works On My Machine\u2122, so that is not a thing on ansikit. stylize \u00b6 chalk clone, works roughly the same way. Refer to the chalk documentation to see how to use it, but it does include indexing and the stylize.style ( chalk.style ) function. Differences \u00b6 chalk uses the modifier \"reversed\", whereas ansikit uses \"reverse\" (as in ansikit.text ). This also reflects in the stylize function. To avoid duplicates, the order of some attribute names have been reversed to match with those on colorize , so instead of bgblue , it's bluebg and so on. style \u00b6 A mix of colorize and stylize . If called with a string, it will use the colorize function, and if indexed, will use stylize to build the styles, so you have the best of both worlds!","title":"ansikit.style"},{"location":"module/style/#ansikitstyle","text":"ansicolors.lua and chalk drop-in replacement that uses ansikit as a backend. It is worth noting that it also supports all extra ansikit styles and modifiers, such as fraktur .","title":"ansikit.style"},{"location":"module/style/#colorize","text":"ansicolors.lua clone, works roughly the same way. Taken from the ansicolors documentation, and adapted for ansikit: Lua print ( colorize ( '%{red}hello' )) print ( colorize ( '%{redbg}hello%{reset}' )) print ( colorize ( '%{bold red underline}hello' )) MoonScript print colorize \" %{red}hello \" print colorize \" %{redbg}hello%{reset} \" print colorize \" %{bold red underline}hello \" The colorize function makes sure that color attributes are reset at each end of the generated string. If you want to generate complex strings piece-by-piece, use colorize.noReset , which works exactly the same, but without adding the reset codes at each end of the string.","title":"colorize"},{"location":"module/style/#differences","text":"ansicolors names the code for bold \"bright\". ansikit differences between bold and bright colors, so to use the bright version of a color you should use bright<color> , and to use bold, simply use the bold attribute. Some attributes are different between ansicolors and ansikit. ansicolor uses \"hidden\" whereas ansikit uses \"conceal\". ansicolor uses \"dim\" whereas ansikit uses \"faint\". Refer to the ansikit.text documentation to see valid attributes. ansicolors detects if it's running on Windows, and if it is, then does not print ANSI codes. This library was half-developed on Windows (eugh, I know), and it Works On My Machine\u2122, so that is not a thing on ansikit.","title":"Differences"},{"location":"module/style/#stylize","text":"chalk clone, works roughly the same way. Refer to the chalk documentation to see how to use it, but it does include indexing and the stylize.style ( chalk.style ) function.","title":"stylize"},{"location":"module/style/#differences_1","text":"chalk uses the modifier \"reversed\", whereas ansikit uses \"reverse\" (as in ansikit.text ). This also reflects in the stylize function. To avoid duplicates, the order of some attribute names have been reversed to match with those on colorize , so instead of bgblue , it's bluebg and so on.","title":"Differences"},{"location":"module/style/#style","text":"A mix of colorize and stylize . If called with a string, it will use the colorize function, and if indexed, will use stylize to build the styles, so you have the best of both worlds!","title":"style"},{"location":"module/text/","text":"ansikit.text \u00b6 Text styling escape codes. Full list of styles \u00b6 reset bold faint italic underline double underline slow blink rapid blink reverse conceal strikethrough ANSI fonts fraktur framed overline See this page for more details on each. reset \u00b6 Resets all text styling. bold \u00b6 Sets bold text. notBold \u00b6 Removes bold effect ( as well as faint effect ). faint \u00b6 Sets faint text. notFaint \u00b6 Removes faint effect ( as well as bold effect ). italic \u00b6 Sets italic text. notItalic \u00b6 Removes italic effect ( as well as Fraktur text ). underline \u00b6 Sets underlined text. doubleUnderline \u00b6 Sets doubly-underlined text. notUnderline \u00b6 Removes underline effect. blink \u00b6 Alias \u2192 slowBlink Sets slow blinking text. rapidBlink \u00b6 Sets rapid blinking text. notBlink \u00b6 Removes blinking effect. reverse \u00b6 Reverse video text. Swaps foreground and background colors. notReverse \u00b6 Removes reverse effect. conceal \u00b6 Conceals text. notConceal \u00b6 Alias \u2192 reveal Reveals text. crossed \u00b6 Alias \u2192 strikethrough Sets crossed-out text. notCrossed \u00b6 Alias \u2192 notStrikethrough Removes strikethrough effect. resetFont \u00b6 Sets the primary and default font. setFont \u00b6 Signature \u2192 ( [ number ] ) -> nil Sets an alternative font n . n defaults to 0. fraktur \u00b6 Sets Fraktur text. notFraktur \u00b6 Removes Fraktur effect ( as well as italic text ). framed \u00b6 Sets framed text. encircled \u00b6 Sets encircled text. notFramed \u00b6 Alias \u2192 notEncircled Removes framed and encircled effects. overline \u00b6 Sets overlined text. notOverline \u00b6 Removes overline effect.","title":"ansikit.text"},{"location":"module/text/#ansikittext","text":"Text styling escape codes.","title":"ansikit.text"},{"location":"module/text/#full-list-of-styles","text":"reset bold faint italic underline double underline slow blink rapid blink reverse conceal strikethrough ANSI fonts fraktur framed overline See this page for more details on each.","title":"Full list of styles"},{"location":"module/text/#reset","text":"Resets all text styling.","title":"reset"},{"location":"module/text/#bold","text":"Sets bold text.","title":"bold"},{"location":"module/text/#notbold","text":"Removes bold effect ( as well as faint effect ).","title":"notBold"},{"location":"module/text/#faint","text":"Sets faint text.","title":"faint"},{"location":"module/text/#notfaint","text":"Removes faint effect ( as well as bold effect ).","title":"notFaint"},{"location":"module/text/#italic","text":"Sets italic text.","title":"italic"},{"location":"module/text/#notitalic","text":"Removes italic effect ( as well as Fraktur text ).","title":"notItalic"},{"location":"module/text/#underline","text":"Sets underlined text.","title":"underline"},{"location":"module/text/#doubleunderline","text":"Sets doubly-underlined text.","title":"doubleUnderline"},{"location":"module/text/#notunderline","text":"Removes underline effect.","title":"notUnderline"},{"location":"module/text/#blink","text":"Alias \u2192 slowBlink Sets slow blinking text.","title":"blink"},{"location":"module/text/#rapidblink","text":"Sets rapid blinking text.","title":"rapidBlink"},{"location":"module/text/#notblink","text":"Removes blinking effect.","title":"notBlink"},{"location":"module/text/#reverse","text":"Reverse video text. Swaps foreground and background colors.","title":"reverse"},{"location":"module/text/#notreverse","text":"Removes reverse effect.","title":"notReverse"},{"location":"module/text/#conceal","text":"Conceals text.","title":"conceal"},{"location":"module/text/#notconceal","text":"Alias \u2192 reveal Reveals text.","title":"notConceal"},{"location":"module/text/#crossed","text":"Alias \u2192 strikethrough Sets crossed-out text.","title":"crossed"},{"location":"module/text/#notcrossed","text":"Alias \u2192 notStrikethrough Removes strikethrough effect.","title":"notCrossed"},{"location":"module/text/#resetfont","text":"Sets the primary and default font.","title":"resetFont"},{"location":"module/text/#setfont","text":"Signature \u2192 ( [ number ] ) -> nil Sets an alternative font n . n defaults to 0.","title":"setFont"},{"location":"module/text/#fraktur","text":"Sets Fraktur text.","title":"fraktur"},{"location":"module/text/#notfraktur","text":"Removes Fraktur effect ( as well as italic text ).","title":"notFraktur"},{"location":"module/text/#framed","text":"Sets framed text.","title":"framed"},{"location":"module/text/#encircled","text":"Sets encircled text.","title":"encircled"},{"location":"module/text/#notframed","text":"Alias \u2192 notEncircled Removes framed and encircled effects.","title":"notFramed"},{"location":"module/text/#overline","text":"Sets overlined text.","title":"overline"},{"location":"module/text/#notoverline","text":"Removes overline effect.","title":"notOverline"},{"location":"module/extra/color/","text":"ansikit.extra.color \u00b6 This module is NOT production ready! Please refrain from using it.","title":"ansikit.extra.color"},{"location":"module/extra/color/#ansikitextracolor","text":"This module is NOT production ready! Please refrain from using it.","title":"ansikit.extra.color"}]}